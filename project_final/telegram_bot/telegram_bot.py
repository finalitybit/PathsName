#!/usr/bin/env python3

import os
import sys
import json
import uuid
import logging
import asyncio
import signal
from typing import Dict, Optional, Any
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import colorlog
from pymorphy3 import MorphAnalyzer
from redis.asyncio import Redis
import aio_pika

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_directory = os.getenv("LOG_DIRECTORY", "./logs")
if not os.path.exists(log_directory):
    os.makedirs(log_directory, exist_ok=True)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

console_handler = colorlog.StreamHandler()
console_handler.setFormatter(colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    log_colors={'DEBUG': 'cyan', 'INFO': 'green', 'WARNING': 'yellow', 'ERROR': 'red'}
))
logger.addHandler(console_handler)

file_handler = logging.FileHandler(f"{log_directory}/telegram_bot.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(name)s'))
logger.addHandler(file_handler)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logger.debug("–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "rabbitmq")
RABBITMQ_PORT = int(os.getenv("RABBITMQ_PORT", 5672))
RABBITMQ_USER = os.getenv("RABBITMQ_USER", "admin")
RABBITMQ_PASS = os.getenv("RABBITMQ_PASS", "rabbitpass")
RABBITMQ_VHOST = os.getenv("RABBITMQ_VHOST", "/")
QUEUE_NAME = os.getenv("QUEUE_NAME", "path_queue")
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")

if not BOT_TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    sys.exit(1)

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
ALLOWED_USERS_STR = os.getenv("ALLOWED_USERS", "")
try:
    ALLOWED_USERS = [int(id.strip()) for id in ALLOWED_USERS_STR.split(",") if id.strip() and not id.strip().startswith('#')]
except ValueError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ALLOWED_USERS: {e}")
    ALLOWED_USERS = []

if ADMIN_ID and ADMIN_ID not in ALLOWED_USERS:
    ALLOWED_USERS.append(ADMIN_ID)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏
class QueryProcessor:
    def __init__(self):
        self.morph = MorphAnalyzer()
        self.redis = None
        self.redis_connected = False

    async def connect_redis(self):
        if not self.redis_connected:
            try:
                self.redis = await Redis.from_url(REDIS_URL)
                self.redis_connected = True
                logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
                self.redis_connected = False

    async def normalize_query(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        await self.connect_redis()
        cache_key = f"norm:{text}"
        if self.redis_connected:
            try:
                if cached := await self.redis.get(cache_key):
                    return cached.decode()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")

        words = text.lower().split()
        normalized = [self.morph.parse(word)[0].normal_form for word in words]
        result = " ".join(normalized)
        if self.redis_connected:
            try:
                await self.redis.setex(cache_key, 3600, result)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
        return result

    async def expand_query(self, text: str) -> list:
        """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ —Å–ª–æ–≤."""
        expanded = set()
        for word in text.split():
            parsed = self.morph.parse(word)[0]
            expanded.update({f.word for f in parsed.lexeme})
            expanded.add(parsed.normal_form)
        return list(expanded)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ
class RabbitClient:
    def __init__(self):
        self.connection = None
        self.channel = None

    async def _connect(self):
        try:
            self.connection = await aio_pika.connect_robust(
                host=RABBITMQ_HOST,
                port=RABBITMQ_PORT,
                login=RABBITMQ_USER,
                password=RABBITMQ_PASS,
                virtualhost=RABBITMQ_VHOST
            )
            self.channel = await self.connection.channel()
            await self.channel.declare_queue(QUEUE_NAME, durable=True)
            logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")

    async def call(self, command: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        try:
            if not self.connection or self.connection.is_closed:
                await self._connect()
                if not self.connection or self.connection.is_closed:
                    return None
                
            message = {"command": command, **data}
            correlation_id = str(uuid.uuid4())
            
            reply_queue = await self.channel.declare_queue("", exclusive=True)
            
            await self.channel.default_exchange.publish(
                aio_pika.Message(
                    body=json.dumps(message).encode(),
                    reply_to=reply_queue.name,
                    correlation_id=correlation_id,
                    delivery_mode=aio_pika.DeliveryMode.PERSISTENT
                ),
                routing_key=QUEUE_NAME
            )
            
            try:
                async with asyncio.timeout(10):  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                    async with reply_queue.iterator() as queue_iter:
                        async for message in queue_iter:
                            async with message.process():
                                if message.correlation_id == correlation_id:
                                    return json.loads(message.body.decode())
            except asyncio.TimeoutError:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç RabbitMQ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ RabbitMQ: {e}")
            return None

    async def close(self):
        if self.connection and not self.connection.is_closed:
            await self.connection.close()
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")

rabbit_client = RabbitClient()
query_processor = QueryProcessor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BotStates(StatesGroup):
    waiting_for_path = State()
    waiting_for_path_to_remove = State()
    waiting_for_search_query = State()
    waiting_for_bank = State()
    waiting_for_vendor = State()
    waiting_for_equipment = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—É—Ç—å")],
        [KeyboardButton(text="üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return keyboard

  
def get_advanced_search_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üè¶ –ü–æ–∏—Å–∫ –ø–æ –±–∞–Ω–∫—É")],
        [KeyboardButton(text="üè≠ –ü–æ–∏—Å–∫ –ø–æ –≤–µ–Ω–¥–æ—Ä—É")],
        [KeyboardButton(text="üîß –ü–æ–∏—Å–∫ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_user_allowed(user_id: int) -> bool:
    allowed = user_id in ALLOWED_USERS or user_id == ADMIN_ID
    if not allowed:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è user_id {user_id}")
    return allowed

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if not is_user_allowed(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏.",
        reply_markup=get_main_keyboard()
    )
    logger.debug(f"–°—Ç–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@dp.message(Command("help"))
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å–∫\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü–æ–∏—Å–∫:\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "‚Ä¢ üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–±–∞–Ω–∫/–≤–µ–Ω–¥–æ—Ä/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∞:\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å\n"
        "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—É—Ç—å"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def cmd_search(message: Message, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(BotStates.waiting_for_search_query)
    buttons = [[KeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))

@dp.message(BotStates.waiting_for_search_query)
async def process_search_query(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
        return

    query_text = message.text.strip()
    if not query_text:
        await message.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    try:
        normalized = await query_processor.normalize_query(query_text)
        expanded = await query_processor.expand_query(normalized)
        response = await rabbit_client.call("ENHANCED_QUERY", {
            "type": "text",
            "value": query_text,
            "normalized": normalized,
            "expanded": expanded,
            "user_id": str(user_id)
        })
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        if response and response.get("status") == "success":
            results = response.get("results", [])
            if results:
                result_text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
                for i, path in enumerate(results[:15], 1):
                    result_text += f"{i}. {path}\n"
                await message.answer(result_text, reply_markup=get_main_keyboard())
            else:
                await message.answer("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(F.text == "üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
async def cmd_advanced_search(message: Message, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üîé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=get_advanced_search_keyboard())

@dp.message(F.text == "üè¶ –ü–æ–∏—Å–∫ –ø–æ –±–∞–Ω–∫—É")
async def cmd_search_by_bank(message: Message, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(BotStates.waiting_for_bank)
    buttons = [[KeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]]
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))

@dp.message(BotStates.waiting_for_bank)
async def process_bank_search(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
        return

    bank_query = message.text.strip()
    if not bank_query:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    try:
        normalized = await query_processor.normalize_query(bank_query)
        response = await rabbit_client.call("ENHANCED_QUERY", {
            "type": "bank",
            "value": bank_query,
            "normalized": normalized,
            "user_id": str(user_id)
        })
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        if response and response.get("status") == "success":
            results = response.get("results", [])
            if results:
                result_text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –±–∞–Ω–∫—É '{bank_query}':\n\n"
                for i, path in enumerate(results[:15], 1):
                    result_text += f"{i}. {path}\n"
                await message.answer(result_text, reply_markup=get_main_keyboard())
            else:
                await message.answer("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –±–∞–Ω–∫—É: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler():
    logger.debug("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    asyncio.create_task(shutdown())

async def shutdown():
    await rabbit_client.close()
    await bot.session.close()
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)
    logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        await rabbit_client._connect()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.debug("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await rabbit_client.close()

if __name__ == "__main__":
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGINT, signal.SIGTERM):
            asyncio.get_event_loop().add_signal_handler(sig, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.debug("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")